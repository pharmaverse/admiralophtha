[{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2021 F. Hoffmann-La Roche AG and Novartis AG  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adbcva.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADBCVA","text":"article describes creating ADBCVA ADaM Best-Corrected Visual Acuity (BCVA) data ophthalmology endpoints. used conjunction article creating BDS dataset SDTM. , derivations processes specific ADBCVA absent, user invited consult aforementioned article guidance. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adbcva.html","id":"dataset-contents","dir":"Articles","previous_headings":"Introduction","what":"Dataset Contents","title":"Creating ADBCVA","text":"name ADBCVA implies, admiralophtha suggests populate ADBCVA solely BCVA records OE SDTM.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adbcva.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating ADBCVA","text":"examples vignette require following packages.","code":"library(dplyr) library(admiral) library(pharmaversesdtm) library(admiraldev) library(admiralophtha)"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adbcva.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating ADBCVA","text":"Initial Set ADBCVA Deriving LogMAR Score Parameters Derivations Standard BDS Variables Deriving Analysis Value Categories Snellen Scores Deriving Criterion Flags BCVA Change Additional Notes Example Script","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adbcva.html","id":"setup","dir":"Articles","previous_headings":"Programming Workflow","what":"Initial set up of ADBCVA","title":"Creating ADBCVA","text":"BDS ADaM datasets, one start OE SDTM, BCVA records interest. purposes next two sections, shall using admiral OE ADSL test data. also require lookup table mapping parameter codes. SBCVA FBCVA definition expression created first - expression can also stored within another (sourced) program. Note: simulate ophthalmology study, add randomly generated STUDYEYE variable ADSL, practice STUDYEYE already derived using derive_var_studyeye(). Following setup, programmer can start constructing ADBCVA. first step subset OE BCVA parameters merge ADSL. required two reasons: firstly, STUDYEYE crucial mapping AFEYE PARAMCD’s. Secondly, treatment start date (TRTSDT) also prerequisite derivation variables Analysis Day (ADY). next item business derive AVAL, AVALU, DTYPE. example, due small number parameters derivation trivial. AFEYE also created step using function derive_var_afeye(). Moving forwards, PARAM PARAMCD can assigned using derive_vars_merged() admiral lookup table param_lookup generated .","code":"data(\"oe_ophtha\") data(\"admiral_adsl\")  # Add STUDYEYE to ADSL to simulate an ophtha dataset adsl <- admiral_adsl %>%   as.data.frame() %>%   mutate(STUDYEYE = sample(c(\"LEFT\", \"RIGHT\"), n(), replace = TRUE)) %>%   convert_blanks_to_na()  oe <- convert_blanks_to_na(oe_ophtha) %>%   ungroup()  # Lookup table param_lookup <- tibble::tribble(   ~OETESTCD, ~OECAT, ~OESCAT, ~AFEYE, ~PARAMCD, ~PARAM, ~PARAMN,   \"VACSCORE\", \"BEST CORRECTED VISUAL ACUITY\", \"OVERALL EVALUATION\", \"Study Eye\", \"SBCVA\", \"Study Eye Visual Acuity Score (letters)\", 1, # nolint   \"VACSCORE\", \"BEST CORRECTED VISUAL ACUITY\", \"OVERALL EVALUATION\", \"Fellow Eye\", \"FBCVA\", \"Fellow Eye Visual Acuity Score (letters)\", 2, # nolint )  # SBCVA and FBCVA definition list definition_bcva <- exprs(   ~PARAMCD, ~condition, ~AVALCA1N, ~AVALCAT1,   \"SBCVA\", AVAL >= 0 & AVAL <= 3, 1000, \"< 20/800\",   \"FBCVA\", AVAL >= 0 & AVAL <= 3, 1000, \"< 20/800\",   \"SBCVA\", AVAL >= 4 & AVAL <= 8, 800, \"20/800\",   \"FBCVA\", AVAL >= 4 & AVAL <= 8, 800, \"20/800\",   \"SBCVA\", AVAL >= 9 & AVAL <= 13, 640, \"20/640\",   \"FBCVA\", AVAL >= 9 & AVAL <= 13, 640, \"20/640\",   \"SBCVA\", AVAL >= 14 & AVAL <= 18, 500, \"20/500\",   \"FBCVA\", AVAL >= 14 & AVAL <= 18, 500, \"20/500\",   \"SBCVA\", AVAL >= 19 & AVAL <= 23, 400, \"20/400\",   \"FBCVA\", AVAL >= 19 & AVAL <= 23, 400, \"20/400\",   \"SBCVA\", AVAL >= 24 & AVAL <= 28, 320, \"20/320\",   \"FBCVA\", AVAL >= 24 & AVAL <= 28, 320, \"20/320\",   \"SBCVA\", AVAL >= 29 & AVAL <= 33, 250, \"20/250\",   \"FBCVA\", AVAL >= 29 & AVAL <= 33, 250, \"20/250\",   \"SBCVA\", AVAL >= 34 & AVAL <= 38, 200, \"20/200\",   \"FBCVA\", AVAL >= 34 & AVAL <= 38, 200, \"20/200\",   \"SBCVA\", AVAL >= 39 & AVAL <= 43, 160, \"20/160\",   \"FBCVA\", AVAL >= 39 & AVAL <= 43, 160, \"20/160\",   \"SBCVA\", AVAL >= 44 & AVAL <= 48, 125, \"20/125\",   \"FBCVA\", AVAL >= 44 & AVAL <= 48, 125, \"20/125\",   \"SBCVA\", AVAL >= 49 & AVAL <= 53, 100, \"20/100\",   \"FBCVA\", AVAL >= 49 & AVAL <= 53, 100, \"20/100\",   \"SBCVA\", AVAL >= 54 & AVAL <= 58, 80, \"20/80\",   \"FBCVA\", AVAL >= 54 & AVAL <= 58, 80, \"20/80\",   \"SBCVA\", AVAL >= 59 & AVAL <= 63, 63, \"20/63\",   \"FBCVA\", AVAL >= 59 & AVAL <= 63, 63, \"20/63\",   \"SBCVA\", AVAL >= 64 & AVAL <= 68, 50, \"20/50\",   \"FBCVA\", AVAL >= 64 & AVAL <= 68, 50, \"20/50\",   \"SBCVA\", AVAL >= 69 & AVAL <= 73, 40, \"20/40\",   \"FBCVA\", AVAL >= 69 & AVAL <= 73, 40, \"20/40\",   \"SBCVA\", AVAL >= 74 & AVAL <= 78, 32, \"20/32\",   \"FBCVA\", AVAL >= 74 & AVAL <= 78, 32, \"20/32\",   \"SBCVA\", AVAL >= 79 & AVAL <= 83, 25, \"20/25\",   \"FBCVA\", AVAL >= 79 & AVAL <= 83, 25, \"20/25\",   \"SBCVA\", AVAL >= 84 & AVAL <= 88, 20, \"20/20\",   \"FBCVA\", AVAL >= 84 & AVAL <= 88, 20, \"20/20\",   \"SBCVA\", AVAL >= 89 & AVAL <= 93, 16, \"20/16\",   \"FBCVA\", AVAL >= 89 & AVAL <= 93, 16, \"20/16\",   \"SBCVA\", AVAL >= 94 & AVAL <= 97, 12, \"20/12\",   \"FBCVA\", AVAL >= 94 & AVAL <= 97, 12, \"20/12\",   \"SBCVA\", AVAL >= 98, 1, \"> 20/12\",   \"FBCVA\", AVAL >= 98, 1, \"> 20/12\" ) adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01A, TRT01P, STUDYEYE)  adbcva <- oe %>%   filter(     OETESTCD %in% c(\"VACSCORE\")   ) %>%   derive_vars_merged(     dataset_add = adsl,     new_vars = adsl_vars,     by_vars = get_admiral_option(\"subject_keys\")   ) adbcva <- adbcva %>%   mutate(     AVAL = OESTRESN,     AVALU = \"letters\",     DTYPE = NA_character_   ) %>%   derive_var_afeye(loc_var = OELOC, lat_var = OELAT) adbcva <- adbcva %>%   derive_vars_merged(     dataset_add = param_lookup,     new_vars = exprs(PARAM, PARAMCD),     by_vars = exprs(OETESTCD, AFEYE),     filter_add = PARAMCD %in% c(\"SBCVA\", \"FBCVA\")   )"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adbcva.html","id":"logmar","dir":"Articles","previous_headings":"Programming Workflow","what":"Deriving LogMAR Score Parameters","title":"Creating ADBCVA","text":"Often ADBCVA datasets contain derived records BCVA LogMAR units. can easily achieved follows using derive_param_computed(). conversion units done using convert_etdrs_to_logmar(). Two separate calls required due parameters split study fellow eye. extra parameters added, records end dataset now present, AVALC day/date variables ADY ADT can derived. Importantly, calls derive_param_computed() list SDTM variables VISIT, VISITNUM, OEDY OEDTC by_vars function. necessary derive ADaM variables AVISIT ADY successive steps. ADaM variables require derived, SDTM variables set missing derived records, per ADaM standards:","code":"adbcva <- adbcva %>%   derive_param_computed(     by_vars = c(       get_admiral_option(\"subject_keys\"),       exprs(VISIT, VISITNUM, OEDY, OEDTC, AFEYE, !!!adsl_vars)     ),     parameters = c(\"SBCVA\"),     set_values_to = exprs(       AVAL = convert_etdrs_to_logmar(AVAL.SBCVA),       PARAMCD = \"SBCVALOG\",       PARAM = \"Study Eye Visual Acuity LogMAR Score\",       DTYPE = NA_character_,       AVALU = \"LogMAR\"     )   ) %>%   derive_param_computed(     by_vars = c(       get_admiral_option(\"subject_keys\"),       exprs(VISIT, VISITNUM, OEDY, OEDTC, AFEYE, !!!adsl_vars)     ),     parameters = c(\"FBCVA\"),     set_values_to = exprs(       AVAL = convert_etdrs_to_logmar(AVAL.FBCVA),       PARAMCD = \"FBCVALOG\",       PARAM = \"Fellow Eye Visual Acuity LogMAR Score\",       DTYPE = NA_character_,       AVALU = \"LogMAR\"     )   ) %>%   mutate(AVALC = as.character(AVAL)) %>%   derive_vars_dt(     new_vars_prefix = \"A\",     dtc = OEDTC,     flag_imputation = \"none\"   ) %>%   derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT)) adbcva <- adbcva %>%   mutate(     VISIT = ifelse(PARAMCD %in% c(\"SBCVALOG\", \"FBCVALOG\"), NA_character_, VISIT),     VISITNUM = ifelse(PARAMCD %in% c(\"SBCVALOG\", \"FBCVALOG\"), NA, VISITNUM),     OEDY = ifelse(PARAMCD %in% c(\"SBCVALOG\", \"FBCVALOG\"), NA, OEDY),     OEDTC = ifelse(PARAMCD %in% c(\"SBCVALOG\", \"FBCVALOG\"), NA_character_, OEDTC)   )"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adbcva.html","id":"further","dir":"Articles","previous_headings":"Programming Workflow","what":"Further Derivations of Standard BDS Variables","title":"Creating ADBCVA","text":"user invited consult article creating BDS dataset SDTM learn add standard BDS variables ADBCVA. Henceforth, purposes article, following sections use ADBCVA dataset generated corresponding admiralophtha template program starting point. Note: dataset already comes criterion flags analysis value categorisation variables, illustration purposes removed.","code":"data(\"admiralophtha_adbcva\")  adbcva <- admiralophtha_adbcva %>%   select(-starts_with(\"CRIT\"), -starts_with(\"AVALCA\"))"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adbcva.html","id":"avalcats","dir":"Articles","previous_headings":"Programming Workflow","what":"Deriving Analysis Value Categories for Snellen Scores","title":"Creating ADBCVA","text":"ophthalmology studies may desire subdivide BCVA records according Snellen category fall (eg, 20/320, 20/100, 20/20 etc). admiral AVALCAT derivation function derive_vars_cat() can used derive AVALCA1N AVALCAT1 based PARAMCD condition SBCVA FBCVA definition expression. resulting output shown (limited first patient ):","code":"adbcva <- adbcva %>%   derive_vars_cat(     definition = definition_bcva,     by_vars = exprs(PARAMCD)   )"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adbcva.html","id":"critflags","dir":"Articles","previous_headings":"Programming Workflow","what":"Deriving Criterion Flags for BCVA Change","title":"Creating ADBCVA","text":"admiralophtha suggests use criterion flag variable pairs (CRITx/CRITxFL) program BCVA endpoints Avoiding loss x letters Gain y letters Gain x y letters (relative baseline basetypes). admiral function derive_vars_crit_flag() can used derive criterion pairs listing criterion number, condition : CHG value lying inside range, CHG >= & CHG <= b CHG value upper limit, CHG <= CHG value lower limit, CHG => b corresponding description criterion. values_yn set TRUE, CRITxFL variable assigned “Y” condition true, “N” condition false, NA condition NA. set TRUE, CRITxFL assigned “Y” condition true NA otherwise. corresponding description criterion. values_yn set TRUE, CRITxFL variable assigned \"Y\" condition satisfied, \"N\" condition satisfied, NA enough information determine whether condition satisfied. values_yn set TRUE, CRITxFL assigned \"Y\" condition satisfied NA otherwise. illustrative purposes, let’s suppose endpoints interest : Gain 5 10 letters relative baseline (5 <= CHG <= 10) Gain 25 letters fewer relative baseline (CHG <= 25) Loss 5 letters relative baseline (CHG <= -5) Gain 15 letters relative baseline (CHG >= 15) Loss 10 letters fewer relative baseline (CHG >= -10). , following call implement criterion variable/flag pairs endpoints . base function using derive_vars_crit_flag(). wrap function inside call_derivation() derive criterion variable/flag pairs one call. Additionally, also wrap everything inside restrict_derivation() ensure criterion flags derived right PARAMCD values (\"SBCVA\" \"FBCVA\"). resulting output shown (limited first patient ):","code":"adbcva <- adbcva %>%   restrict_derivation(     derivation = call_derivation,     filter = PARAMCD %in% c(\"SBCVA\", \"FBCVA\"),     args = params(       derivation = derive_vars_crit_flag,       variable_params = list(         params(crit_nr = 1, condition = CHG >= 0 & CHG <= 5, description = \"0 <= CHG <= 5\"),         params(crit_nr = 2, condition = CHG >= -5 & CHG <= -1, description = \"-5 <= CHG <= -1\"),         params(crit_nr = 3, condition = CHG >= 10 & CHG <= 15, description = \"10 <= CHG <= 15\"),         params(crit_nr = 4, condition = CHG <= -20, description = \"CHG <= -20\"),         params(crit_nr = 5, condition = CHG <= 5, description = \"CHG <= 5\"),         params(crit_nr = 6, condition = CHG <= 10, description = \"CHG <= 10\"),         params(crit_nr = 7, condition = CHG >= -15, description = \"CHG >= -15\"),         params(crit_nr = 8, condition = CHG >= 15, description = \"CHG >= 15\")       ),       values_yn = TRUE     )   ) %>%   arrange(USUBJID, DOMAIN, PARAMCD)"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adbcva.html","id":"additional-notes","dir":"Articles","previous_headings":"Programming Workflow","what":"Additional Notes","title":"Creating ADBCVA","text":"interpreting endpoints Loss 5 letters fewer relative baseline, implicitly assumed article also includes case letters gained, inequality reads CHG >= -5. case, .e. one wishes exclude cases letter gains, inequality interest instead -5 <= CHG <= -1. vignette extensively showcases use derive_vars_crit_flag() derive criterion variable/flag pairs applied variable CHG associated argument condition criterion. function can also used create criterion flag relative variables (e.g. condition = exprs(AVAL > 10) AVAL).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/admiralophtha.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"package extension, new admiral best place first start reading Get Started guide. extension package follows main idea conventions, re-uses many functions admiral, important thoroughly understand able use admiralophtha.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/admiralophtha.html","id":"derivations","dir":"Articles","previous_headings":"","what":"Derivations","title":"Get Started","text":"important functions admiralophtha derivations. follow conventions admiral focused ophthalmology-specific needs.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/admiralophtha.html","id":"starting-a-script","dir":"Articles","previous_headings":"","what":"Starting a Script","title":"Get Started","text":"ophthalmology ADaM data structures, overview flow example function calls common steps provided following vignettes: Creating ADBCVA Creating ADOE Creating ADVFQ","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/admiralophtha.html","id":"support","dir":"Articles","previous_headings":"","what":"Support","title":"Get Started","text":"Support provided via admiral Slack channel.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adoe.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADOE","text":"article describes creating ADOE ADaM Ophthalmology Exam Analysis data ophthalmology endpoints. used conjunction article creating BDS dataset SDTM. , derivations processes specific ADOE absent, user invited consult aforementioned article guidance. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adoe.html","id":"dataset-contents","dir":"Articles","previous_headings":"Introduction","what":"Dataset Contents","title":"Creating ADOE","text":"admiralophtha suggests populate ADOE general miscellaneous ophthalmology parameters. efficacy endpoint-related parameters (eg. BCVA tests) placed separate datasets (eg. ADBCVA).","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adoe.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating ADOE","text":"examples vignette require following packages.","code":"library(dplyr) library(admiral) library(pharmaversesdtm) library(admiraldev) library(admiralophtha) library(stringr)"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adoe.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating ADOE","text":"Initial Set ADOE Derivations Standard BDS Variables Example Script","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adoe.html","id":"setup","dir":"Articles","previous_headings":"Programming Workflow","what":"Initial set up of ADOE","title":"Creating ADOE","text":"BDS ADaM datasets, one start OE SDTM, general ophthalmology records interest. purposes next two sections, shall using admiral OE ADSL test data. also require lookup table mapping parameter codes. Note: simulate ophthalmology study, add randomly generated STUDYEYE variable ADSL, practice STUDYEYE already derived using derive_var_studyeye(). Following setup, programmer can start constructing ADOE. first step subset OE general ophthalmology parameters. , one can merge resulting dataset ADSL. required two reasons: firstly, STUDYEYE crucial mapping AFEYE PARAMCD’s. Secondly, treatment start date (TRTSDT) also prerequisite derivation variables Analysis Day (ADY). next item business derive AVAL, AVALU, DTYPE. example, due small number parameters derivation trivial. AFEYE also created step using function derive_var_afeye(). determine affected eye, function compares OELAT STUDYEYE variable created previous step.","code":"data(\"oe_ophtha\") data(\"admiral_adsl\")  # Add STUDYEYE to ADSL to simulate an ophtha dataset adsl <- admiral_adsl %>%   as.data.frame() %>%   mutate(STUDYEYE = sample(c(\"LEFT\", \"RIGHT\"), n(), replace = TRUE)) %>%   convert_blanks_to_na()  oe <- convert_blanks_to_na(oe_ophtha)  # Lookup table  # nolint start param_lookup <- tibble::tribble(   ~OETESTCD, ~OECAT, ~OESCAT, ~AFEYE, ~PARAMCD, ~PARAM, ~PARAMN,   \"CSUBTH\", \"OPHTHALMIC ASSESSMENTS\", \"SD-OCT CST SINGLE FORM\", \"Study Eye\", \"SCSUBTH\", \"Study Eye Center Subfield Thickness (um)\", 1,   \"CSUBTH\", \"OPHTHALMIC ASSESSMENTS\", \"SD-OCT CST SINGLE FORM\", \"Fellow Eye\", \"FCSUBTH\", \"Fellow Eye Center Subfield Thickness (um)\", 2,   \"DRSSR\", \"OPHTHALMIC ASSESSMENTS\", \"SD-OCT CST SINGLE FORM\", \"Study Eye\", \"SDRSSR\", \"Study Eye Diabetic Retinopathy Severity\", 3,   \"DRSSR\", \"OPHTHALMIC ASSESSMENTS\", \"SD-OCT CST SINGLE FORM\", \"Fellow Eye\", \"FDRSSR\", \"Fellow Eye Diabetic Retinopathy Severity\", 4,   \"IOP\", \"INTRAOCULAR PRESSURE\", NA_character_, \"Study Eye\", \"SIOP\", \"Study Eye IOP (mmHg)\", 5,   \"IOP\", \"INTRAOCULAR PRESSURE\", NA_character_, \"Fellow Eye\", \"FIOP\", \"Fellow Eye IOP (mmHg)\", 6 ) # nolint end adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01A, TRT01P, STUDYEYE)  adoe <- oe %>%   filter(     OETESTCD %in% c(\"CSUBTH\", \"DRSSR\", \"IOP\")   ) %>%   derive_vars_merged(     dataset_add = adsl,     new_vars = adsl_vars,     by_vars = get_admiral_option(\"subject_keys\")   ) adoe <- adoe %>%   # Calculate AVAL, AVALC, AVALU and DTYPE   mutate(     AVAL = OESTRESN,     AVALC = OESTRESC,     AVALU = OESTRESU,     DTYPE = NA_character_   ) %>%   # Derive AFEYE needed for PARAMCD derivation   derive_var_afeye(loc_var = OELOC, lat_var = OELAT, loc_vals = c(\"EYE\", \"RETINA\"))"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adoe.html","id":"param_avisit","dir":"Articles","previous_headings":"Programming Workflow","what":"Assigning PARAM/PARAMCD and AVISIT/AVISITN","title":"Creating ADOE","text":"Moving forwards, PARAM PARAMCD can assigned using derive_vars_merged() admiral lookup table param_lookup generated . AVISIT, AVISITN related timepoint variables can also derived soon , though derivation generally study-specific. simple option included ; please consult admiral BDS findings vignette detailed discussion.","code":"adoe <- adoe %>%   # Add PARAM, PARAMCD from lookup table   derive_vars_merged(     dataset_add = param_lookup,     new_vars = exprs(PARAM, PARAMCD),     by_vars = exprs(OETESTCD, AFEYE)   ) %>%   # Derive visit, baseline flag info and BASETYPE   mutate(     ATPTN = OETPTNUM,     ATPT = OETPT,     AVISIT = case_when(       str_detect(VISIT, \"SCREEN\") ~ \"Screening\",       !is.na(VISIT) ~ str_to_title(VISIT),       TRUE ~ NA_character_     ),     AVISITN = round(VISITNUM, 0),     ABLFL = if_else(AVISIT == \"Baseline\", \"Y\", NA_character_)     # In actual studies, ABLFL derivation will likely be more nuanced     # and leverage derive_var_extreme_flag()   )"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adoe.html","id":"params","dir":"Articles","previous_headings":"Programming Workflow","what":"Creating IOP pre to post-dose difference derived parameter","title":"Creating ADOE","text":"Two derived parameters interest difference pre post-dose IOP eye visit. records can added two calls derive_param_computed(). Since calls similar, can executed one code block using call_derivation() - please see Higher Order Functions vignette details. Note within call derive_param_computed(), parameters argument used pass expression uniquely identifies records pre-dose IOP post-dose IOP using timepoint variable OETPT, IOP records mapped PARAMCD = \"SIOP\" PARAMCD = \"FIOP\". Users may need update expression study-specific collection mapping differs standard. Additionally, noted SIOPCHG FIOPCHG derived parameters, generally recommended populate BASE, CHG PCHG difficult/confusing interpret. can simply achieved one step, derivation derive_var_base() can placed inside restrict_derivation() filter added exclude parameters. , BASE set NA SIOPCHG FIOPCHG, later calls derive_var_chg() derive_var_pchg() need changes.","code":"adoe <- adoe %>%   # Add derived parameter for difference between pre and post dose IOP   call_derivation(     derivation = derive_param_computed,     by_vars = c(get_admiral_option(\"subject_keys\"), !!adsl_vars, exprs(AVISIT, AVISITN)),     variable_params = list(       # Study eye       params(         parameters = exprs(           SIOPPRE = PARAMCD == \"SIOP\" & ATPT == \"PRE-DOSE\",           SIOPPOST = PARAMCD == \"SIOP\" & ATPT == \"POST-DOSE\"         ),         set_values_to = exprs(           PARAMCD = \"SIOPCHG\",           PARAM = \"Study Eye IOP Pre to Post Dose Diff (mmHg)\",           PARAMN = 9,           AVAL = AVAL.SIOPPOST - AVAL.SIOPPRE,           AVALC = as.character(AVAL)         )       ),       # Fellow eye       params(         parameters = exprs(           FIOPPRE = PARAMCD == \"FIOP\" & ATPT == \"PRE-DOSE\",           FIOPPOST = PARAMCD == \"FIOP\" & ATPT == \"POST-DOSE\"         ),         set_values_to = exprs(           PARAMCD = \"FIOPCHG\",           PARAM = \"Fellow Eye IOP Pre to Post Dose Diff (mmHg)\",           PARAMN = 10,           AVAL = AVAL.FIOPPOST - AVAL.FIOPPRE,           AVALC = as.character(AVAL)         )       )     )   ) adoe <- adoe %>%   # Calculate BASE (do not derive for IOP change params)   restrict_derivation(     derivation = derive_var_base,     args = params(       by_vars = c(get_admiral_option(\"subject_keys\"), exprs(PARAMCD, ATPT)),       source_var = AVAL,       new_var = BASE     ),     filter = !PARAMCD %in% c(\"SIOPCHG\", \"FIOPCHG\")   )"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/adoe.html","id":"further","dir":"Articles","previous_headings":"Programming Workflow","what":"Further Derivations of Standard BDS Variables","title":"Creating ADOE","text":"user invited consult article creating BDS dataset SDTM learn add standard BDS variables ADOE.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/advfq.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADVFQ","text":"article describes creating ADVFQ ADaM Visual Functioning Questionnaire data ophthalmology endpoints. used conjunction article creating BDS dataset SDTM. , derivations processes specific ADVFQ absent, user invited consult aforementioned article guidance. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified. full, open-source VFQ questionnaire can accessed .","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/advfq.html","id":"dataset-contents","dir":"Articles","previous_headings":"Introduction","what":"Dataset Contents","title":"Creating ADVFQ","text":"admiralophtha suggests populate ADVFQ solely VFQ records QS SDTM. questionnaire data placed separate datasets (e.g. ADQS).","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/advfq.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating ADVFQ","text":"examples vignette require following packages.","code":"library(dplyr) library(admiral) library(pharmaversesdtm) library(admiraldev) library(admiralophtha)"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/advfq.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating ADVFQ","text":"Initial set ADVFQ Derive Analysis Value existing questions (AVAL) Derive Parameters recoded items summary scores Derive Analysis Variables (ANL01FL ASEQ) Add ADSL Variables Example Script","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/advfq.html","id":"setup","dir":"Articles","previous_headings":"Programming Workflow","what":"Initial set up of ADVFQ","title":"Creating ADVFQ","text":"start, datasets needed creation questionnaire dataset read environment. purpose demonstration shall use admiral QS ADSL test data. QS dataset filtered VFQ parameters interest. Next, programmer create parameter lookup table includes QSTESTCD, PARAMCD, PARAM, PARCAT1 PARCAT2 variables. include parameters needed final ADVFQ used later merge parameter information. Now ADVFQ dataset can constructed, merging filtered QS dataset ADSL. necessary treatment start date TRTSDT prerequisite derivation variables Analysis Day ADY can programmed following article creating BDS dataset SDTM.","code":"data(\"admiral_adsl\") data(\"qs_ophtha\") adsl <- admiral_adsl qs <- qs_ophtha  qs <- qs %>% filter(QSTESTCD %in% c(\"VFQ1\", \"VFQ2\", \"VFQ3\", \"VFQ4\")) param_lookup <- tibble::tribble(   ~QSTESTCD, ~PARAMCD, ~PARAM, ~PARCAT1, ~PARCAT2,   \"VFQ1\", \"VFQ1\", \"Overall Health\", \"NEI VFQ-25\", \"Original Response\",   \"VFQ2\", \"VFQ2\", \"Eyesight in Both Eyes\", \"NEI VFQ-25\", \"Original Response\",   \"VFQ3\", \"VFQ3\", \"Worry About Eyesight\", \"NEI VFQ-25\", \"Original Response\",   \"VFQ4\", \"VFQ4\", \"Pain in and Around Eyes\", \"NEI VFQ-25\", \"Original Response\",   \"QR01\", \"QR01\", \"Recoded Item - 01\", \"NEI VFQ-25\", \"General 01\",   \"QR02\", \"QR02\", \"Recoded Item - 02\", \"NEI VFQ-25\", \"General 01\",   \"QR03\", \"QR03\", \"Recoded Item - 03\", \"NEI VFQ-25\", \"General 02\",   \"QR04\", \"QR04\", \"Recoded Item - 04\", \"NEI VFQ-25\", \"General 02\",   \"QSG01\", \"QSG01\", \"General Score 01\", \"NEI VFQ-25\", \"Averaged Result\",   \"QSG02\", \"QSG02\", \"General Score 02\", \"NEI VFQ-25\", \"Averaged Result\",   \"QBCSCORE\", \"QBCSCORE\", \"Composite Score\", \"NEI VFQ-25\", \"Averaged Result\" ) adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01A, TRT01P)  advfq <- derive_vars_merged(   qs,   dataset_add = adsl,   new_vars = adsl_vars,   by_vars = get_admiral_option(\"subject_keys\") )"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/advfq.html","id":"aval","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Value for Existing Questions","title":"Creating ADVFQ","text":"derive analysis values use function admiral::derive_vars_merged_lookup() merges PARAMCD parameter lookup table. merges parameter QSTESTCD assigns AVAL AVALC.","code":"advfq <- advfq %>%   ## Add PARAMCD only - add PARAM etc later ----   derive_vars_merged_lookup(     dataset_add = param_lookup,     new_vars = exprs(PARAMCD),     by_vars = exprs(QSTESTCD)   ) %>%   ## Calculate AVAL and AVALC ----   mutate(     AVAL = QSSTRESN,     AVALC = QSORRES   )"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/advfq.html","id":"parameters","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Parameters for Recoded Items and Summary Scores","title":"Creating ADVFQ","text":"included initial records QS, programmer next program new records parameters recode original questions. Run section code every question need recoding. gives example recoding one question. Next, programmer create summary records average recoded questions using admiral::derive_summary_records. example uses two recoded questions create average record.","code":"## QR01 Recoded Item 01 # set to 100 if [advfq.AVAL] = 1 # else set to 75 if [advfq.AVAL] = 2 # else set to 50 if [advfq.AVAL] = 3 # else set to 25 if [advfq.AVAL] = 4 # else set to 0 if [advfq.AVAL] = 5 advfq <- advfq %>%   derive_summary_records(     dataset_add = advfq,     by_vars = c(       get_admiral_option(\"subject_keys\"),       exprs(!!!adsl_vars, PARAMCD, VISITNUM, VISIT)     ),     filter_add = QSTESTCD == \"VFQ1\" & !is.na(AVAL),     set_values_to = exprs(       AVAL = identity(AVAL),       PARAMCD = \"QR01\"     )   ) %>%   mutate(AVAL = ifelse(PARAMCD == \"QR01\",     case_when(       AVAL == 1 ~ 100,       AVAL == 2 ~ 75,       AVAL == 3 ~ 50,       AVAL == 4 ~ 25,       AVAL >= 5 ~ 0     ),     AVAL   )) ## Derive a new record as a summary record  ---- ## QSG01 General Score 01 # Average of QR01 and QR02 records advfq <- advfq %>%   derive_summary_records(     dataset_add = advfq,     by_vars = c(       get_admiral_option(\"subject_keys\"),       exprs(!!!adsl_vars, VISITNUM, VISIT, ADT, ADY)     ),     filter_add = PARAMCD %in% c(\"QR01\", \"QR02\") & !is.na(AVAL),     set_values_to = exprs(       AVAL = mean(AVAL),       PARAMCD = \"QSG01\"     )   )"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/advfq.html","id":"analysis","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Variables","title":"Creating ADVFQ","text":"finding ADaMs, analysis flag derived identify appropriate observation(s) use particular analysis subject multiple observations within particular timing period. situation, analysis flag (e.g. ANLxxFL) may used choose appropriate record analysis. flag may derived using admiral function admiral::derive_var_extreme_flag(). example, assume like choose latest value subject keys along PARAMCD AVISIT. derive ASEQ using admiral::derive_var_obs_number() based observation number within dataset, additionally merge PARAM, PARCAT1 PARCAT2 using earlier lookup table.","code":"## ANL01FL: Flag last result within an AVISIT for post-baseline records ---- advfq <- advfq %>%   restrict_derivation(     derivation = derive_var_extreme_flag,     args = params(       new_var = ANL01FL,       by_vars = c(get_admiral_option(\"subject_keys\"), exprs(PARAMCD, AVISIT)),       order = exprs(ADT, AVAL),       mode = \"last\"     ),     filter = !is.na(AVISITN) & ONTRTFL == \"Y\"   ) ## Get ASEQ and PARAM  ---- advfq <- advfq %>%   # Calculate ASEQ   derive_var_obs_number(     new_var = ASEQ,     by_vars = get_admiral_option(\"subject_keys\"),     order = exprs(PARAMCD, ADT, AVISITN, VISITNUM),     check_type = \"error\"   ) %>%   # Derive PARAM   derive_vars_merged(dataset_add = select(param_lookup, -QSTESTCD), by_vars = exprs(PARAMCD))"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/advfq.html","id":"adslvars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add ADSL Variables","title":"Creating ADVFQ","text":"analysis variables programmed, variables ADSL required merged dataset using admiral::derive_vars_merged.","code":"# Add all ADSL variables advfq <- advfq %>%   derive_vars_merged(     dataset_add = select(adsl, !!!negate_vars(adsl_vars)),     by_vars = get_admiral_option(\"subject_keys\")   )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/standards.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Ophthalmology Standards","text":"Ophthalmology hugely diverse therapeutic area, endpoints conventions can differ study study - let alone across companies. Notwithstanding , exist cases alignment possible; page indexes occurrences admiralophtha suggests adoption certain standard way things. Applying standards means mandatory, help leveraging tools (templates, functions, etc.) provided admiralophtha well lower barrier entry programming study. Additionally, page can function guidance programmers starting dip feet ophthalmology ADaM programming.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/standards.html","id":"dataset-subdivision","dir":"Articles","previous_headings":"Introduction","what":"Dataset Subdivision","title":"Ophthalmology Standards","text":"Due aforementioned high complexity diversity ophthalmology data, discouraged funnel records OE SDTM dataset single ADOE dataset, result overly complicated program/dataset pair. admiralophtha instead suggests following partition: ADOE general miscellaneous ophthalmology tests used efficacy programming. ADBCVA BCVA data - almost always constitute primary secondary endpoint require endpoint-related programming criterion flags. endpoints specific efficacy programming may required ADaM dataset (e.g. intraocular pressure data, ADIOP). ADVFQ Visual Functioning Questionnaire data. Subdividing ADaM datasets study ensure wherever custom efficacy programming required, automatically limited data interest. instance, study various endpoints form Gain x y letters relative baseline (similar) likely require criterion variable/flag pair (see Criterion Flag section detail). BCVA data stored ADOE, criterion variable/flag pairs blank irrelevant data dataset, save BCVA records. Conversely, collecting BCVA data ADBCVA ensures criterion variable/flag pairs relevant, resulting dataset readable.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/standards.html","id":"criterion","dir":"Articles","previous_headings":"Introduction","what":"Criterion Flags","title":"Ophthalmology Standards","text":"admiralophtha suggests use criterion variable/flag pairs CRITx/CRITxFL possible endpoint programming. implemented correctly, transparent approach condition CRITxFL can clearly encoded CRITx, without view documentation. appropriate, condition CRITx represented programmatically rather words reduce possibility confusion. instance, endpoint Gain x y letters relative baseline, one set CRIT1 = \"x <= CHG <= y\". Note: Though allowable according ADaM standards, generally discouraged use criterion flag/variable pair one criterion across multiple parameters ADaM dataset, renders dataset confusing scrutinise. BCVA change endpoints, admiral provides function derive_vars_crit_flag() add en masse.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/standards.html","id":"affected-eye-derivation","dir":"Articles","previous_headings":"Introduction","what":"Affected Eye Derivation","title":"Ophthalmology Standards","text":"admiralophtha function derive_var_afeye follows standard derivation: Set “EYES” Study Eye Selection [ADSL.STUDYEYE] missing, Laterality [xxLAT] equal “BILATERAL”. Else set “STUDY EYE” Study Eye Selection [ADSL.STUDYEYE] either “RIGHT” “LEFT”, matches Laterality [xxLAT] observation record. Else set “STUDY EYE” Study Eye Selection [ADSL.STUDYEYE] “BILATERAL”, Laterality [xxLAT] missing observation record. Else set “FELLOW EYE” Study Eye Selection [ADSL.STUDYEYE] either “RIGHT” “LEFT”, [xxLAT] missing match Laterality [xxLAT] observation record. Else set null. standard values Location [xxLOC] = “EYE” Laterality [xxLAT] = “LEFT”, “RIGHT”, “BILATERAL” study can updated inputs function, otherwise also expected AFEYE derived, warning returned values found.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/articles/standards.html","id":"differences-between-pre-and-post-dose-iop","dir":"Articles","previous_headings":"Introduction","what":"Differences between pre and post-dose IOP","title":"Ophthalmology Standards","text":"admiralophtha suggests calculate differences pre post-dose IOP two new derived parameters (study fellow eyes) please see ADOE vignette template details.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edoardo Mancini. Author, maintainer. Ritika Aggarwal. Author. Jane Gao. Author. William Holmes. Author. Josie Jackson. Author. Sonali Jain. Author. Yuki Matsunaga. Author. Gordon Miller. Author. Rachel Linacre. Author. Lucy Palmen. Author. Nandini R Thampi. Author. Aldrich Salva. Author. Steven Ting. Author. . Copyright holder, funder. . Copyright holder, funder.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mancini E, Aggarwal R, Gao J, Holmes W, Jackson J, Jain S, Matsunaga Y, Miller G, Linacre R, Palmen L, R Thampi N, Salva , Ting S (2025). admiralophtha: ADaM R Asset Library - Ophthalmology. R package version 1.3.0.9001, https://github.com/pharmaverse/admiralophtha/, https://pharmaverse.github.io/admiralophtha/.","code":"@Manual{,   title = {admiralophtha: ADaM in R Asset Library - Ophthalmology},   author = {Edoardo Mancini and Ritika Aggarwal and Jane Gao and William Holmes and Josie Jackson and Sonali Jain and Yuki Matsunaga and Gordon Miller and Rachel Linacre and Lucy Palmen and Nandini {R Thampi} and Aldrich Salva and Steven Ting},   year = {2025},   note = {R package version 1.3.0.9001,     https://github.com/pharmaverse/admiralophtha/},   url = {https://pharmaverse.github.io/admiralophtha/}, }"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/dev/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"ADaM in R Asset Library - Ophthalmology","text":"provide complementary (admiral) toolbox enables users develop ophthalmology disease area datasets endpoints.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ADaM in R Asset Library - Ophthalmology","text":"install latest development version package directly GitHub use following code:","code":"pak::pkg_install(\"admiralophtha\", dependencies = TRUE)"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/index.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"ADaM in R Asset Library - Ophthalmology","text":"Build toolbox re-usable functions utilities create Ophthalmology-specific ADaM datasets R modular manner. functions created based upon ADaM Implementation Guide aim facilitate programming ADaM dataset standards.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/index.html","id":"references-and-documentation","dir":"","previous_headings":"","what":"References and Documentation","title":"ADaM in R Asset Library - Ophthalmology","text":"Please refer {admiral} References Documentation.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/index.html","id":"r-versions","dir":"","previous_headings":"","what":"R Versions","title":"ADaM in R Asset Library - Ophthalmology","text":"’s summary strategy package related R versions: R versions developers users follow admiral core package. development main branch admiral core used dependency. releasing new admiralophtha version must run using latest released admiral core version, .e., also main branch admiral core.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"ADaM in R Asset Library - Ophthalmology","text":"use following support communications user developer community: Slack - informal discussions, Q&building user community. don’t access, use link join pharmaverse Slack workspace GitHub Issues - direct feedback, enhancement requests raising bugs","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha-package.html","id":null,"dir":"Reference","previous_headings":"","what":"admiralophtha: ADaM in R Asset Library - Ophthalmology — admiralophtha-package","title":"admiralophtha: ADaM in R Asset Library - Ophthalmology — admiralophtha-package","text":"Aids programming Clinical Data Standards Interchange Consortium (CDISC) compliant Ophthalmology Analysis Data Model (ADaM) datasets R. ADaM datasets mandatory part New Drug Biologics License Application submitted United States Food Drug Administration (FDA). Analysis derivations implemented accordance \"Analysis Data Model Implementation Guide\" (CDISC Analysis Data Model Team, 2021, https://www.cdisc.org/standards/foundational/adam/adamig-v1-3-release-package).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"admiralophtha: ADaM in R Asset Library - Ophthalmology — admiralophtha-package","text":"Maintainer: Edoardo Mancini edoardo.mancini@roche.com (ORCID) Authors: Ritika Aggarwal ritika.aggarwal@novartis.com Jane Gao jane.gao@roche.com William Holmes william.holmes@roche.com Josie Jackson josie.jackson@roche.com Sonali Jain sonali.jain@novartis.com Yuki Matsunaga yuki.matsunaga@novartis.com Gordon Miller gordon.miller@roche.com Rachel Linacre rachel.linacre@roche.com Lucy Palmen lucy.palmen@roche.com Nandini R Thampi nandini.rajendhiran@novartis.com Aldrich Salva salva.aldrich@gene.com Steven Ting steven.ting@cytel.com contributors: F. Hoffmann-La Roche AG [copyright holder, funder] Novartis AG [copyright holder, funder]","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_adbcva.html","id":null,"dir":"Reference","previous_headings":"","what":"Best Corrected Visual Acuity Analysis Dataset — admiralophtha_adbcva","title":"Best Corrected Visual Acuity Analysis Dataset — admiralophtha_adbcva","text":"example Best Corrected Visual Acuity (BCVA) analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_adbcva.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Best Corrected Visual Acuity Analysis Dataset — admiralophtha_adbcva","text":"","code":"admiralophtha_adbcva"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_adbcva.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Best Corrected Visual Acuity Analysis Dataset — admiralophtha_adbcva","text":"object class tbl_df (inherits tbl, data.frame) 7672 rows 116 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_adbcva.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Best Corrected Visual Acuity Analysis Dataset — admiralophtha_adbcva","text":"Derived OE ADSL datasets using {admiral}, {admiralophtha} ADBCVA template.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_adoe.html","id":null,"dir":"Reference","previous_headings":"","what":"Ophthalmology Exam Analysis Dataset — admiralophtha_adoe","title":"Ophthalmology Exam Analysis Dataset — admiralophtha_adoe","text":"example Ophthalmology Exam Analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_adoe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ophthalmology Exam Analysis Dataset — admiralophtha_adoe","text":"","code":"admiralophtha_adoe"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_adoe.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ophthalmology Exam Analysis Dataset — admiralophtha_adoe","text":"object class tbl_df (inherits tbl, data.frame) 19136 rows 103 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_adoe.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Ophthalmology Exam Analysis Dataset — admiralophtha_adoe","text":"Derived OE ADSL datasets using {admiral}, {admiralophtha} ADOE template.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_advfq.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual Function Questionnaire Analysis Dataset — admiralophtha_advfq","title":"Visual Function Questionnaire Analysis Dataset — admiralophtha_advfq","text":"example Visual Function Questionnaire (VFQ) analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_advfq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual Function Questionnaire Analysis Dataset — admiralophtha_advfq","text":"","code":"admiralophtha_advfq"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_advfq.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Visual Function Questionnaire Analysis Dataset — admiralophtha_advfq","text":"object class tbl_df (inherits tbl, data.frame) 28798 rows 41 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/admiralophtha_advfq.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Visual Function Questionnaire Analysis Dataset — admiralophtha_advfq","text":"Derived ADSL QS datasets using {admiral}, {admiralophtha}  ADVFQ template. full, open-source VFQ questionnaire can accessed .","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_etdrs_to_logmar.html","id":null,"dir":"Reference","previous_headings":"","what":"ETDRS –> LogMAR conversion — convert_etdrs_to_logmar","title":"ETDRS –> LogMAR conversion — convert_etdrs_to_logmar","text":"Convert ETDRS score LogMAR units","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_etdrs_to_logmar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ETDRS –> LogMAR conversion — convert_etdrs_to_logmar","text":"","code":"convert_etdrs_to_logmar(value)"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_etdrs_to_logmar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ETDRS –> LogMAR conversion — convert_etdrs_to_logmar","text":"value object containing ETDRS score convert logMAR. Permitted values numeric value, e.g. 2, -5, 1.4 Default value none","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_etdrs_to_logmar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ETDRS –> LogMAR conversion — convert_etdrs_to_logmar","text":"input value converted converted logMAR units.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_etdrs_to_logmar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ETDRS –> LogMAR conversion — convert_etdrs_to_logmar","text":"ETDRS value converted logMAR : $$logMAR = -0.02 * ETDRS + 1.7$$ Source conversion formula: Beck, R.W., et al. computerized method visual acuity testing. American Journal Ophthalmology, 135(2), pp.194-205. doi:https://doi.org/10.1016/s0002-9394(02)01825-1.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_etdrs_to_logmar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ETDRS –> LogMAR conversion — convert_etdrs_to_logmar","text":"Rachel Linacre","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_etdrs_to_logmar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ETDRS –> LogMAR conversion — convert_etdrs_to_logmar","text":"","code":"library(tibble) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(admiral) library(admiraldev) #>  #> Attaching package: ‘admiraldev’ #> The following objects are masked from ‘package:dplyr’: #>  #>     anti_join, filter_if, inner_join, left_join  adbcva <- tribble(   ~STUDYID, ~USUBJID, ~AVAL,   \"XXX001\", \"P01\", 5,   \"XXX001\", \"P02\", 10,   \"XXX001\", \"P03\", 15,   \"XXX001\", \"P04\", 20,   \"XXX001\", \"P05\", 25 )  adbcva <- adbcva %>% mutate(AVAL = convert_etdrs_to_logmar(AVAL))"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_logmar_to_etdrs.html","id":null,"dir":"Reference","previous_headings":"","what":"LogMAR –> ETDRS conversion — convert_logmar_to_etdrs","title":"LogMAR –> ETDRS conversion — convert_logmar_to_etdrs","text":"Convert LogMAR score ETDRS units","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_logmar_to_etdrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogMAR –> ETDRS conversion — convert_logmar_to_etdrs","text":"","code":"convert_logmar_to_etdrs(value)"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_logmar_to_etdrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogMAR –> ETDRS conversion — convert_logmar_to_etdrs","text":"value object containing logMAR score convert ETDRS. Permitted values numeric value, e.g. 2, -5, 1.4 Default value none","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_logmar_to_etdrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LogMAR –> ETDRS conversion — convert_logmar_to_etdrs","text":"input value converted ETDRS units.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_logmar_to_etdrs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogMAR –> ETDRS conversion — convert_logmar_to_etdrs","text":"logMAR value converted ETDRS : $$ETDRS = -(logMAR - 1.7) / 0.02$$ Source conversion formula: Beck, R.W., et al. computerized method visual acuity testing. American Journal Ophthalmology, 135(2), pp.194-205. doi:https://doi.org/10.1016/s0002-9394(02)01825-1.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_logmar_to_etdrs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LogMAR –> ETDRS conversion — convert_logmar_to_etdrs","text":"Nandini R Thampi","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/convert_logmar_to_etdrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogMAR –> ETDRS conversion — convert_logmar_to_etdrs","text":"","code":"library(tibble) library(dplyr) library(admiral)  oe <- tribble(   ~STUDYID, ~USUBJID, ~OETESTCD, ~OEMETHOD, ~OESTRESN,   \"XXX001\", \"P01\", \"VACSCORE\", \"logMAR EYE CHART\", 1.08,   \"XXX001\", \"P02\", \"VACSCORE\", \"logMAR EYE CHART\", 1.66,   \"XXX001\", \"P03\", \"VACSCORE\", \"logMAR EYE CHART\", 1.60,   \"XXX001\", \"P04\", \"VACSCORE\", \"ETDRS EYE CHART\", 57,   \"XXX001\", \"P05\", \"VACSCORE\", \"ETDRS EYE CHART\", 1 )  adbcva <- oe %>%   filter(OETESTCD == \"VACSCORE\" & toupper(OEMETHOD) == \"LOGMAR EYE CHART\") %>%   mutate(OESTRESN = convert_logmar_to_etdrs(OESTRESN))"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_afeye.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Affected Eye — derive_var_afeye","title":"Derive Affected Eye — derive_var_afeye","text":"Derive Affected Eye (AFEYE) occurrence datasets","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_afeye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Affected Eye — derive_var_afeye","text":"","code":"derive_var_afeye(dataset, loc_var, lat_var, loc_vals = \"EYE\")"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_afeye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Affected Eye — derive_var_afeye","text":"dataset Input dataset. Permitted values dataset, .e., data.frame tibble Default value none loc_var Location variable, usually XXLOC. Permitted values unquoted symbol, e.g., AVAL Default value none lat_var Laterality variable, usually XXLAT. Permitted values unquoted symbol, e.g., AVAL Default value none loc_vals xxLOC values AFEYE derived. Permitted values character vector, e.g. c(\"EYE\", \"RETINA\") Default value \"EYE\"","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_afeye.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Affected Eye — derive_var_afeye","text":"input occurrence dataset Affected Eye (AFEYE) added.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_afeye.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Affected Eye — derive_var_afeye","text":"Affected Eye derived occurrence dataset using laterality Study Eye. assumes Study Eye already added ADSL.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_afeye.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derive Affected Eye — derive_var_afeye","text":"Lucy Palmen","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_afeye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Affected Eye — derive_var_afeye","text":"","code":"library(tibble) library(admiral)  adae1 <- tribble(   ~STUDYID, ~USUBJID, ~STUDYEYE, ~AELOC, ~AELAT,   \"XXX001\", \"P01\", \"RIGHT\", \"EYE\", \"RIGHT\",   \"XXX001\", \"P01\", \"RIGHT\", \"EYE\", \"LEFT\",   \"XXX001\", \"P01\", \"RIGHT\", \"EYE\", \"\",   \"XXX001\", \"P01\", \"RIGHT\", \"\", \"RIGHT\",   \"XXX001\", \"P02\", \"LEFT\", \"\", \"\",   \"XXX001\", \"P02\", \"LEFT\", \"EYE\", \"LEFT\",   \"XXX001\", \"P04\", \"BILATERAL\", \"EYE\", \"RIGHT\",   \"XXX001\", \"P05\", \"RIGHT\", \"EYE\", \"RIGHT\",   \"XXX001\", \"P05\", \"RIGHT\", \"EYE\", \"BILATERAL\",   \"XXX001\", \"P06\", \"BILATERAL\", \"\", \"\",   \"XXX001\", \"P06\", \"BILATERAL\", \"\", \"RIGHT\",   \"XXX001\", \"P07\", \"BILATERAL\", \"EYE\", \"BILATERAL\",   \"XXX001\", \"P08\", \"\", \"EYE\", \"BILATERAL\",   \"XXX001\", \"P09\", \"NONSENSE\", \"EYE\", \"BILATERAL\",   \"XXX001\", \"P09\", \"BILATERAL\", \"EYE\", \"NONSENSE\",   \"XXX001\", \"P09\", \"BILATERAL\", \"NONSENSE\", \"BILATERAL\",   \"XXX001\", \"P10\", \"RIGHT\", \"EYE\", \"BOTH\" )  derive_var_afeye(adae1, loc_var = AELOC, lat_var = AELAT) #> # A tibble: 17 × 6 #>    STUDYID USUBJID STUDYEYE    AELOC      AELAT       AFEYE      #>    <chr>   <chr>   <chr>       <chr>      <chr>       <chr>      #>  1 XXX001  P01     \"RIGHT\"     \"EYE\"      \"RIGHT\"     Study Eye  #>  2 XXX001  P01     \"RIGHT\"     \"EYE\"      \"LEFT\"      Fellow Eye #>  3 XXX001  P01     \"RIGHT\"     \"EYE\"      \"\"          NA         #>  4 XXX001  P01     \"RIGHT\"     \"\"         \"RIGHT\"     NA         #>  5 XXX001  P02     \"LEFT\"      \"\"         \"\"          NA         #>  6 XXX001  P02     \"LEFT\"      \"EYE\"      \"LEFT\"      Study Eye  #>  7 XXX001  P04     \"BILATERAL\" \"EYE\"      \"RIGHT\"     Study Eye  #>  8 XXX001  P05     \"RIGHT\"     \"EYE\"      \"RIGHT\"     Study Eye  #>  9 XXX001  P05     \"RIGHT\"     \"EYE\"      \"BILATERAL\" Both Eyes  #> 10 XXX001  P06     \"BILATERAL\" \"\"         \"\"          NA         #> 11 XXX001  P06     \"BILATERAL\" \"\"         \"RIGHT\"     NA         #> 12 XXX001  P07     \"BILATERAL\" \"EYE\"      \"BILATERAL\" Both Eyes  #> 13 XXX001  P08     \"\"          \"EYE\"      \"BILATERAL\" NA         #> 14 XXX001  P09     \"NONSENSE\"  \"EYE\"      \"BILATERAL\" NA         #> 15 XXX001  P09     \"BILATERAL\" \"EYE\"      \"NONSENSE\"  NA         #> 16 XXX001  P09     \"BILATERAL\" \"NONSENSE\" \"BILATERAL\" NA         #> 17 XXX001  P10     \"RIGHT\"     \"EYE\"      \"BOTH\"      NA          adae2 <- tribble(   ~STUDYID, ~USUBJID, ~STUDYEYE, ~AELOC, ~AELAT,   \"XXX001\", \"P01\", \"RIGHT\", \"EYES\", \"RIGHT\",   \"XXX001\", \"P02\", \"RIGHT\", \"RETINA\", \"LEFT\",   \"XXX001\", \"P03\", \"LEFT\", \"\", \"\" )  derive_var_afeye(adae2, loc_var = AELOC, lat_var = AELAT, loc_vals = c(\"EYES\", \"RETINA\")) #> # A tibble: 3 × 6 #>   STUDYID USUBJID STUDYEYE AELOC    AELAT   AFEYE      #>   <chr>   <chr>   <chr>    <chr>    <chr>   <chr>      #> 1 XXX001  P01     RIGHT    \"EYES\"   \"RIGHT\" Study Eye  #> 2 XXX001  P02     RIGHT    \"RETINA\" \"LEFT\"  Fellow Eye #> 3 XXX001  P03     LEFT     \"\"       \"\"      NA"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds CRITx/CRITxFL pairs to BCVA dataset — derive_var_bcvacritxfl","title":"Adds CRITx/CRITxFL pairs to BCVA dataset — derive_var_bcvacritxfl","text":"derive_var_bcvacritxfl() function superseded favor admiral::derive_vars_crit_flag(). Adds criterion variables CRITx corresponding flags CRITxFL dataset containing BCVA records","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds CRITx/CRITxFL pairs to BCVA dataset — derive_var_bcvacritxfl","text":"","code":"derive_var_bcvacritxfl(   dataset,   crit_var,   bcva_ranges = NULL,   bcva_uplims = NULL,   bcva_lowlims = NULL,   additional_text = \"\",   critxfl_index = NULL )"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds CRITx/CRITxFL pairs to BCVA dataset — derive_var_bcvacritxfl","text":"dataset Input dataset containing BCVA data (usually ADBCVA). Permitted values dataset, .e., data.frame tibble Default value none crit_var Variable respect CRITx/CRITxFL derived (usually CHG AVAL). Permitted values unquoted symbol, e.g., AVAL Default value none bcva_ranges List numeric vectors. vector c(,b) bcva_ranges, pair variables CRITx, CRITxFL created condition: <=  crit_var <= b. criterion flags type required, leave NULL. Permitted values list containing one numeric vectors, length two. E.g. list(c(1, 2), c(3, 4) Default value NULL bcva_uplims List containing one numeric elements. element bcva_uplims, pair variables CRITx, CRITxFL created condition: crit_var <= . criterion flags type required, leave NULL. Permitted values list containing one numeric scalars. E.g. list(2, -4) Default value NULL bcva_lowlims List containing one numeric elements. element b bcva_lowlims, pair variables CRITx, CRITxFL created condition: crit_var >= b. criterion flags type required, leave NULL. Permitted values list containing one numeric scalars. E.g. list(2, -4) Default value NULL additional_text string containing additional text append CRITx. Permitted values character scalar, .e., character vector length one Default value \"\" critxfl_index positive integer detailing first value x use CRITxFL. supplied, function takes first available value x, counting x = 1. Permitted values positive integer, e.g. 2 5 Default value NULL","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds CRITx/CRITxFL pairs to BCVA dataset — derive_var_bcvacritxfl","text":"input BCVA dataset additional column pairsCRITx, CRITxFL.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds CRITx/CRITxFL pairs to BCVA dataset — derive_var_bcvacritxfl","text":"function works calling derive_var_bcvacritxfl() elements bcva_ranges, bcva_uplims bcva_lowlims. NOTE: crit_var equal NA, resulting criterion flag also marked NA.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds CRITx/CRITxFL pairs to BCVA dataset — derive_var_bcvacritxfl","text":"Edoardo Mancini","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds CRITx/CRITxFL pairs to BCVA dataset — derive_var_bcvacritxfl","text":"","code":"library(tibble) library(admiral) library(admiraldev)  adbcva1 <- tribble(   ~STUDYID, ~USUBJID, ~AVISIT, ~BASETYPE, ~PARAMCD, ~CHG,   \"XXX001\", \"P01\", \"BASELINE\", \"LAST\", \"SBCVA\", 0,   \"XXX001\", \"P01\", \"WEEK 2\", \"LAST\", \"FBCVA\", 2,   \"XXX001\", \"P02\", \"BASELINE\", \"LAST\", \"SBCVA\", -13,   \"XXX001\", \"P02\", \"WEEK 2\", \"LAST\", \"FBCVA\", 5,   \"XXX001\", \"P03\", \"BASELINE\", \"LAST\", \"SBCVA\", NA,   \"XXX001\", \"P03\", \"WEEK 2\", \"LAST\", \"FBCVA\", 17 )  derive_var_bcvacritxfl(   dataset = adbcva1,   crit_var = exprs(CHG),   bcva_ranges = list(c(0, 5), c(-5, -1), c(10, 15)),   bcva_uplims = list(5, 10),   bcva_lowlims = list(8),   additional_text = \"\" ) #> # A tibble: 6 × 18 #>   STUDYID USUBJID AVISIT   BASETYPE PARAMCD   CHG CRIT1    CRIT1FL CRIT2 CRIT2FL #>   <chr>   <chr>   <chr>    <chr>    <chr>   <dbl> <chr>    <chr>   <chr> <chr>   #> 1 XXX001  P01     BASELINE LAST     SBCVA       0 0 <= CH… Y       -5 <… N       #> 2 XXX001  P01     WEEK 2   LAST     FBCVA       2 0 <= CH… Y       -5 <… N       #> 3 XXX001  P02     BASELINE LAST     SBCVA     -13 0 <= CH… N       -5 <… N       #> 4 XXX001  P02     WEEK 2   LAST     FBCVA       5 0 <= CH… Y       -5 <… N       #> 5 XXX001  P03     BASELINE LAST     SBCVA      NA 0 <= CH… NA      -5 <… NA      #> 6 XXX001  P03     WEEK 2   LAST     FBCVA      17 0 <= CH… N       -5 <… N       #> # ℹ 8 more variables: CRIT3 <chr>, CRIT3FL <chr>, CRIT4 <chr>, CRIT4FL <chr>, #> #   CRIT5 <chr>, CRIT5FL <chr>, CRIT6 <chr>, CRIT6FL <chr>  adbcva2 <- tribble(   ~STUDYID, ~USUBJID, ~AVISIT, ~BASETYPE, ~PARAMCD, ~AVAL, ~CHG,   \"XXX001\", \"P01\", \"BASELINE\", \"LAST\", \"SBCVA\", 4, NA,   \"XXX001\", \"P01\", \"BASELINE\", \"LAST\", \"SBCVA\", 6, NA,   \"XXX001\", \"P01\", \"AVERAGE BASELINE\", \"AVERAGE\", \"SBCVA\", 5, NA,   \"XXX001\", \"P01\", \"WEEK 2\", \"LAST\", \"SBCVA\", -3, NA,   \"XXX001\", \"P01\", \"WEEK 4\", \"LAST\", \"SBCVA\", -10, NA,   \"XXX001\", \"P01\", \"WEEK 6\", \"LAST\", \"SBCVA\", 12, NA,   \"XXX001\", \"P01\", \"WEEK 2\", \"AVERAGE\", \"SBCVA\", -2, -7,   \"XXX001\", \"P01\", \"WEEK 4\", \"AVERAGE\", \"SBCVA\", 6, 1,   \"XXX001\", \"P01\", \"WEEK 6\", \"AVERAGE\", \"SBCVA\", 3, -2 )  restrict_derivation(   adbcva2,   derivation = derive_var_bcvacritxfl,   args = params(     crit_var = exprs(CHG),     bcva_ranges = list(c(0, 5), c(-10, 0)),     bcva_lowlims = list(5),     additional_text = \" (AVERAGE)\"   ),   filter = PARAMCD %in% c(\"SBCVA\", \"FBCVA\") & BASETYPE == \"AVERAGE\" ) #> # A tibble: 9 × 13 #>   STUDYID USUBJID AVISIT        BASETYPE PARAMCD  AVAL   CHG CRIT1 CRIT1FL CRIT2 #>   <chr>   <chr>   <chr>         <chr>    <chr>   <dbl> <dbl> <chr> <chr>   <chr> #> 1 XXX001  P01     AVERAGE BASE… AVERAGE  SBCVA       5    NA 0 <=… NA      -10 … #> 2 XXX001  P01     WEEK 2        AVERAGE  SBCVA      -2    -7 0 <=… N       -10 … #> 3 XXX001  P01     WEEK 4        AVERAGE  SBCVA       6     1 0 <=… Y       -10 … #> 4 XXX001  P01     WEEK 6        AVERAGE  SBCVA       3    -2 0 <=… N       -10 … #> 5 XXX001  P01     BASELINE      LAST     SBCVA       4    NA NA    NA      NA    #> 6 XXX001  P01     BASELINE      LAST     SBCVA       6    NA NA    NA      NA    #> 7 XXX001  P01     WEEK 2        LAST     SBCVA      -3    NA NA    NA      NA    #> 8 XXX001  P01     WEEK 4        LAST     SBCVA     -10    NA NA    NA      NA    #> 9 XXX001  P01     WEEK 6        LAST     SBCVA      12    NA NA    NA      NA    #> # ℹ 3 more variables: CRIT2FL <chr>, CRIT3 <chr>, CRIT3FL <chr>"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl_util.html","id":null,"dir":"Reference","previous_headings":"","what":"Add CRITx/CRITxFL pair to BCVA dataset — derive_var_bcvacritxfl_util","title":"Add CRITx/CRITxFL pair to BCVA dataset — derive_var_bcvacritxfl_util","text":"derive_var_bcvacritxfl_util() function superseded favor admiral::derive_vars_crit_flag(). Helper function derive_var_bcvacritxfl() adds criterion variable CRITx corresponding flag CRITxFL dataset containing BCVA records","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl_util.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add CRITx/CRITxFL pair to BCVA dataset — derive_var_bcvacritxfl_util","text":"","code":"derive_var_bcvacritxfl_util(   dataset,   crit_var,   critx_text,   critxfl_cond,   counter,   bcva_range = NULL,   bcva_uplim = NULL,   bcva_lowlim = NULL )"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl_util.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add CRITx/CRITxFL pair to BCVA dataset — derive_var_bcvacritxfl_util","text":"dataset Input dataset (usually ADBCVA). Permitted values dataset, .e., data.frame tibble Default value none crit_var Variable respect CRITx/CRITxFL derived (usually CHG AVAL). Permitted values unquoted symbol, e.g., AVAL Default value none critx_text String containing text CRITx variable. Permitted values character scalar, .e., character vector length one Default value none critxfl_cond String containing R code detailing criterion satisfied CRITxFL variable equal \"Y\". Permitted values character scalar, .e., character vector length one, containing evaluable R code, e.g. \"AVAL < 2\" Default value none counter Integer detailing value x use CRITxFL. Permitted values positive integer, e.g. 2 5 Default value none bcva_range Numeric vector detailing lower upper change BCVA limits (bcva_range called critxfl_cond criterion stipulates change BCVA lie inside range). Permitted values numeric vector length two, e.g. c(1, 2) Default value NULL bcva_uplim Numeric value detailing highest change BCVA limit (bcva_uplim called critxfl_cond criterion stipulates change BCVA lie upper limit). Permitted values numeric value, e.g. 2, -5, 1.4 Default value NULL bcva_lowlim Numeric value detailing lowest change BCVA limit (bcva_lowlim called critxfl_cond criterion stipulates change BCVA lie lower limit). Permitted values numeric value, e.g. 2, -5, 1.4 Default value NULL","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl_util.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add CRITx/CRITxFL pair to BCVA dataset — derive_var_bcvacritxfl_util","text":"input BCVA dataset additional columns CRITx, CRITxFL.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl_util.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add CRITx/CRITxFL pair to BCVA dataset — derive_var_bcvacritxfl_util","text":"criterion change BCVA CRITxFL can three types: (1) value lies within range; <= crit_var <= b; (2) value upper limit; crit_var <= ; (3) value lower limit; b <= crit_var. (1), bcva_range must specified function; (2), bcva_uplim; (3) bcva_lowlim. necessary supply least one three arguments. NOTE: crit_var equal NA, resulting criterion flag also marked NA.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_bcvacritxfl_util.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add CRITx/CRITxFL pair to BCVA dataset — derive_var_bcvacritxfl_util","text":"Edoardo Mancini","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_studyeye.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Study Eye — derive_var_studyeye","title":"Derive Study Eye — derive_var_studyeye","text":"Derive Study Eye (STUDYEYE) ADSL dataset","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_studyeye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Study Eye — derive_var_studyeye","text":"","code":"derive_var_studyeye(dataset_adsl, dataset_sc, sctestcd_value = \"FOCID\")"},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_studyeye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Study Eye — derive_var_studyeye","text":"dataset_adsl ADSL input dataset. Permitted values dataset, .e., data.frame tibble Default value none dataset_sc SC input dataset. Permitted values dataset, .e., data.frame tibble Default value none sctestcd_value SCTESTCD value flagging Study Eye selection records. Permitted values character scalar, .e., character vector length one Default value \"FOCID\"","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_studyeye.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Study Eye — derive_var_studyeye","text":"input ADSL dataset additional column named STUDYEYE.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_studyeye.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Study Eye — derive_var_studyeye","text":"Study Eye derived ADSL using \"Study Eye selection\" records SC SDTM dataset.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_studyeye.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derive Study Eye — derive_var_studyeye","text":"Edoardo Mancini","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/dev/reference/derive_var_studyeye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Study Eye — derive_var_studyeye","text":"","code":"library(tibble) library(admiral)  adsl <- tribble(   ~STUDYID, ~USUBJID,   \"XXX001\", \"P01\",   \"XXX001\", \"P02\",   \"XXX001\", \"P03\",   \"XXX001\", \"P04\",   \"XXX001\", \"P05\" )  sc <- tribble(   ~STUDYID, ~USUBJID, ~SCTESTCD, ~SCSTRESC,   \"XXX001\", \"P01\", \"FOCID\", \"OS\",   \"XXX001\", \"P01\", \"ACOHORT\", \"COHORT1\",   \"XXX001\", \"P02\", \"FOCID\", \"OD\",   \"XXX001\", \"P02\", \"ACOHORT\", \"COHORT3\",   \"XXX001\", \"P04\", \"FOCID\", \"OU\",   \"XXX001\", \"P05\", \"FOCID\", \"OD\",   \"XXX001\", \"P06\", \"FOCID\", \"OS\" )  derive_var_studyeye(adsl, sc) #> # A tibble: 5 × 3 #>   STUDYID USUBJID STUDYEYE    #>   <chr>   <chr>   <chr>       #> 1 XXX001  P01     \"LEFT\"      #> 2 XXX001  P02     \"RIGHT\"     #> 3 XXX001  P03     \"\"          #> 4 XXX001  P04     \"BILATERAL\" #> 5 XXX001  P05     \"RIGHT\""}]
