library(admiral)
library(admiral.test) # Contains example datasets from the CDISC pilot project
library(dplyr)
library(lubridate)
library(stringr)
library(labelled)
# Load input data
data("admiral_dm")
data("admiral_sv")
dm <- admiral_dm
sv <- admiral_sv
library(admiral)
library(admiral.test) # Contains example datasets from the CDISC pilot project
library(dplyr)
library(lubridate)
library(stringr)
library(labelled)
library(admiral)
library(admiral.test) # Contains example datasets from the CDISC pilot project
library(dplyr)
library(lubridate)
library(stringr)
library(labelled)
# Load input data
data("admiral_dm")
data("admiral_sv")
dm <- admiral_dm
sv <- admiral_sv
# Remove screen failures, they will not make it to drug infusion
dm1 <- dm %>%
filter(ARMCD != "Scrnfail")
# use subjects in DM  and info from SV  Screening 1 visit
sc <- merge(dm1[, c("STUDYID", "USUBJID", "SUBJID", "RFSTDTC")],
sv[sv$VISIT == "SCREENING 1", c("STUDYID", "USUBJID", "SVSTDTC", "VISIT")],
by = c("STUDYID", "USUBJID")
)
# Create SC domain var
sc$DOMAIN <- "SC"
sc$SCCAT <- "STUDY EYE SELECTION"
sc$SCTESTCD <- "FOCID"
sc$SCTEST <- "Focus of Study-Specific Interest"
sc$EPOCH <- "SCREENING"
sc$SCDTC <- sc$SVSTDTC
sc$SCDY <- as.numeric(as.Date(sc$SCDTC) - as.Date(sc$RFSTDTC))
# Even SUBJID numbers will have study eye assigned to Left;  odd to Right
sc$SCORRES <- if_else(as.integer(sc$SUBJID) %% 2 == 0, "Left Eye", "Right Eye")
sc$SCSTRESC <- if_else(as.integer(sc$SUBJID) %% 2 == 0, "OS", "OD")
# SCSEQ;
sc <- sc %>%
group_by(STUDYID, USUBJID) %>%
dplyr::mutate(SCSEQ = row_number())
# keep relevant variables
sc <- subset(sc, select = c(
"STUDYID", "DOMAIN", "USUBJID", "SCSEQ", "SCTESTCD", "SCTEST",
"SCCAT", "SCORRES", "SCSTRESC", "EPOCH", "SCDTC", "SCDY"
))
sc <- sc %>%
ungroup() %>%
# sort data
arrange(STUDYID, USUBJID, SCSEQ) %>%
# add labels
set_variable_labels(
STUDYID = "Study Identifier",
DOMAIN = "Domain Abbreviation",
USUBJID = "Unique Subject Identifier",
SCSEQ = "Sequence Number",
SCTESTCD = "Subject Characteristic Short Name",
SCTEST = "Subject Characteristic",
SCCAT = "Category for Subject Characteristic",
SCORRES = "Result or Finding in Original Units",
SCSTRESC = "Character Result/Finding in Std Format",
EPOCH = "Epoch",
SCDTC = "Date/Time of Collection",
SCDY = "Study Day of Examination"
)
# ---- Save output ----
admiral_sc <- sc
save(admiral_sc, file = "./data/admiral_sc.rda", compress = "bzip2")
styler::style_file()
styler::style_file("./R)
""
"
styler::style_file("./R")
styler::style_file("./R/create_sc_test_data.R")
devtools::document()
?devtools::document
lintr::lint_package()
?lint_package()
R CMD check
devtools::check()
library(labelled)
renv::restore()
library(labelled)
library(admiral)
library(admiral.test) # Contains example datasets from the CDISC pilot project
library(dplyr)
library(lubridate)
library(stringr)
library(labelled)
library(admiral)
library(admiral.test) # Contains example datasets from the CDISC pilot project
library(admiral)
library(admiral.test) # Contains example datasets from the CDISC pilot project
library(dplyr)
library(lubridate)
library(stringr)
library(labelled)
set_variable_labels?
''
?set_variable_labels
??set_variable_labels
library(labelled)
library(dplyr)
library(dplyr)
install.packages(c("admiral.test", "backports", "BH", "brew", "brio", "bslib", "callr", "cli", "clipr", "commonmark", "covr", "cpp11", "crayon", "credentials", "crosstalk", "curl", "desc", "devtools", "diffobj", "digest", "downlit", "dplyr", "DT", "evaluate", "fansi", "gert", "gh", "git2r", "gitcreds", "glue", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "jsonlite", "knitr", "later", "lifecycle", "lintr", "lubridate", "memoise", "mime", "openssl", "pillar", "pkgbuild", "pkgdown", "pkgload", "processx", "promises", "ps", "purrr", "R.cache", "R.methodsS3", "R.oo", "R.utils", "R6", "rcmdcheck", "Rcpp", "rematch2", "remotes", "renv", "rex", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstudioapi", "rversions", "sass", "sessioninfo", "shiny", "spelling", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "vctrs", "waldo", "withr", "xfun", "xmlparsedata", "yaml", "zip"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib="/tmp/RtmpKORnbZ/renv-system-library")
install.packages(c("admiral.test", "backports", "BH", "brew", "brio", "bslib", "callr", "cli", "clipr", "commonmark", "covr", "cpp11", "crayon", "credentials", "crosstalk", "curl", "desc", "devtools", "diffobj", "digest", "downlit", "dplyr", "DT", "evaluate", "fansi", "gert", "gh", "git2r", "gitcreds", "glue", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "jsonlite", "knitr", "later", "lifecycle", "lintr", "lubridate", "memoise", "mime", "openssl", "pillar", "pkgbuild", "pkgdown", "pkgload", "processx", "promises", "ps", "purrr", "R.cache", "R.methodsS3", "R.oo", "R.utils", "R6", "rcmdcheck", "Rcpp", "rematch2", "remotes", "renv", "rex", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstudioapi", "rversions", "sass", "sessioninfo", "shiny", "spelling", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "vctrs", "waldo", "withr", "xfun", "xmlparsedata", "yaml", "zip"))
install.packages(c("admiral.test", "backports", "BH", "brew", "brio", "bslib", "callr", "cli", "clipr", "commonmark", "covr", "cpp11", "crayon", "credentials", "crosstalk", "curl", "desc", "devtools", "diffobj", "digest", "downlit", "dplyr", "DT", "evaluate", "fansi", "gert", "gh", "git2r", "gitcreds", "glue", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "jsonlite", "knitr", "later", "lifecycle", "lintr", "lubridate", "memoise", "mime", "openssl", "pillar", "pkgbuild", "pkgdown", "pkgload", "processx", "promises", "ps", "purrr", "R.cache", "R.methodsS3", "R.oo", "R.utils", "R6", "rcmdcheck", "Rcpp", "rematch2", "remotes", "renv", "rex", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstudioapi", "rversions", "sass", "sessioninfo", "shiny", "spelling", "stringi", "stringr", "styler", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "utf8", "vctrs", "waldo", "withr", "xfun", "xmlparsedata", "yaml", "zip"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib="/tmp/RtmpMCsOdP/renv-system-library")
library(admiral)
library(admiral.test) # Contains example datasets from the CDISC pilot project
library(dplyr)
library(lubridate)
library(stringr)
library(labelled)
data("admiral_dm")
data("admiral_sv")
dm <- admiral_dm
sv <- admiral_sv
# Remove screen failures, they will not make it to drug infusion
dm1 <- dm %>%
filter(ARMCD != "Scrnfail")
# use subjects in DM  and info from SV  Screening 1 visit
sc <- merge(dm1[, c("STUDYID", "USUBJID", "SUBJID", "RFSTDTC")],
sv[sv$VISIT == "SCREENING 1", c("STUDYID", "USUBJID", "SVSTDTC", "VISIT")],
by = c("STUDYID", "USUBJID")
)
# Create SC domain var
sc$DOMAIN <- "SC"
sc$SCCAT <- "STUDY EYE SELECTION"
sc$SCTESTCD <- "FOCID"
sc$SCTEST <- "Focus of Study-Specific Interest"
sc$EPOCH <- "SCREENING"
sc$SCDTC <- sc$SVSTDTC
sc$SCDY <- as.numeric(as.Date(sc$SCDTC) - as.Date(sc$RFSTDTC))
# Even SUBJID numbers will have study eye assigned to Left;  odd to Right
sc$SCORRES <- if_else(as.integer(sc$SUBJID) %% 2 == 0, "Left Eye", "Right Eye")
sc$SCSTRESC <- if_else(as.integer(sc$SUBJID) %% 2 == 0, "OS", "OD")
# SCSEQ;
sc <- sc %>%
group_by(STUDYID, USUBJID) %>%
dplyr::mutate(SCSEQ = row_number())
# keep relevant variables
sc <- subset(sc, select = c(
"STUDYID", "DOMAIN", "USUBJID", "SCSEQ", "SCTESTCD", "SCTEST",
"SCCAT", "SCORRES", "SCSTRESC", "EPOCH", "SCDTC", "SCDY"
))
sc <- sc %>%
ungroup() %>%
# sort data
arrange(STUDYID, USUBJID, SCSEQ) %>%
# add labels
set_variable_labels(
STUDYID = "Study Identifier",
DOMAIN = "Domain Abbreviation",
USUBJID = "Unique Subject Identifier",
SCSEQ = "Sequence Number",
SCTESTCD = "Subject Characteristic Short Name",
SCTEST = "Subject Characteristic",
SCCAT = "Category for Subject Characteristic",
SCORRES = "Result or Finding in Original Units",
SCSTRESC = "Character Result/Finding in Std Format",
EPOCH = "Epoch",
SCDTC = "Date/Time of Collection",
SCDY = "Study Day of Examination"
)
# ---- Save output ----
admiral_sc <- sc
save(admiral_sc, file = "./data/admiral_sc.rda", compress = "bzip2")
styler::style_file("./R/create_sc_test_data.R")
devtools::document()
pkgdown::build_site()
.Last.error
.Last.error
lintr::lint_package()
lintr::lint_package("./R/create_sc_test_data.R")
devtools::check()
renv::restore(packages = "renv")
renv::status()
renv::restore()
devtools::check()
library(roxygen2)
library(roxygen2)
detach("package:roxygen2", unload = TRUE)
sc <- sc %>%
ungroup() %>%
# sort data
arrange(STUDYID, USUBJID, SCSEQ) %>%
# add labels
set_variable_labels(
STUDYID = "Study Identifier",
DOMAIN = "Domain Abbreviation",
USUBJID = "Unique Subject Identifier",
SCSEQ = "Sequence Number",
SCTESTCD = "Subject Characteristic Short Name",
SCTEST = "Subject Characteristic",
SCCAT = "Category for Subject Characteristic",
SCORRES = "Result or Finding in Original Units",
SCSTRESC = "Character Result/Finding in Std Format",
EPOCH = "Epoch",
SCDTC = "Date/Time of Collection",
SCDY = "Study Day of Examination"
)
library(labelled)
